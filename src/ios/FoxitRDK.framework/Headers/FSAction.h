/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/**
 * @file	FSAction.h
 * @brief	This file contains definitions of object-c APIs for Foxit PDF SDK.
 */

#import "FSCommon.h"

/**
 * @brief	Enumeration for action type.
 *
 * @details	Values of this enumeration should be used alone.
 */
enum FS_ACTIONTYPE {
    /** @brief	Action type: unknown action. */
    e_actionTypeUnknown = 0,
    /** @brief	Action type: go-to action. */
    e_actionTypeGoto = 1,
    /** @brief	Action type: remote go-to action. */
    e_actionTypeGoToR = 2,
    /** @brief	Action type: embedded go-to action. */
    e_actionTypeGoToE = 3,
    /** @brief	Action type: launch action. */
    e_actionTypeLaunch = 4,
    /** @brief	Action type: thread action. */
    e_actionTypeThread = 5,
    /** @brief	Action type: uniform resource identifier (URI) action. */
    e_actionTypeURI = 6,
    /** @brief	Action type: sound action. */
    e_actionTypeSound = 7,
    /** @brief	Action type: movie action. */
    e_actionTypeMovie = 8,
    /** @brief	Action type: hide action. */
    e_actionTypeHide = 9,
    /** @brief	Action type: named action. */
    e_actionTypeNamed = 10,
    /** @brief	Action type: submit-form action. */
    e_actionTypeSubmitForm = 11,
    /** @brief	Action type: reset-form action. */
    e_actionTypeResetForm = 12,
    /** @brief	Action type: import-data action. */
    e_actionTypeImportData = 13,
    /** @brief	Action type: JavaScript action. */
    e_actionTypeJavaScript = 14,
    /** @brief	Action type: set-OCG-state action. */
    e_actionTypeSetOCGState = 15,
    /** @brief	Action type: rendition action. */
    e_actionTypeRendition = 16,
    /** @brief	Action type: transition action. */
    e_actionTypeTrans = 17,
    /** @brief	Action type: go-to-3D-view action. */
    e_actionTypeGoTo3DView = 18
};

/**
 * @brief	Class to represent destination information.
 *
 * @details	A destination defines a particular view of a PDF document, consisting of the following items:
 *			<ul>
 *			<li>The page of the document to be displayed.</li>
 *			<li>The location of the document window on that page.</li>
 *			<li>The magnification (zoom) factor to use when displaying the page.</li>
 *			</ul>
 *			Destinations may be associated with bookmarks, link annotations, or some types of actions.
 *			In each case, the destination specifies the view of the document to be presented when the bookmark
 *			item or link annotation is opened or the action is performed.<br>
 *			This class offers functions to create destination objects for different zoom mode, and get destination data.
 *
 * @see FSBookmark
 * @see FSLink
 * @see FSGotoAction
 */
@interface FSDestination : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomXYZ}.
 *
 * @param[in]	page			The destination page.
 * @param[in]	left			Horizontal coordinate value of a position as page's left-top position.
 * @param[in]	top				Vertical coordinate value of a position as page's left-top position.
 * @param[in]	zoomFactor		Zoom factor value.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createXYZ: (FSPDFPage*)page left: (float)left top: (float)top zoomFactor: (float)zoomFactor;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitPage}.
 *
 * @param[in]	page	The destination page.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitPage: (FSPDFPage*)page;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitHorz}.
 *
 * @param[in]	page	The destination page.
 * @param[in]	top		Vertical coordinate of top edge.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitHorz: (FSPDFPage*)page top: (float)top;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitVert}.
 *
 * @param[in]	page	The destination page.
 * @param[in]	left	Horizontal coordinate of left edge.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitVert: (FSPDFPage*)page left: (float)left;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitRect}.
 *
 * @param[in]	page		The destination page.
 * @param[in]	left		The coordinate left of a rectangle.
 * @param[in]	bottom		The coordinate bottom of a rectangle.
 * @param[in]	right		The coordinate right of a rectangle.
 * @param[in]	top			The coordinate top of a rectangle.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitRect: (FSPDFPage*)page left: (float)left bottom: (float)bottom right: (float)right top: (float)top;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitBBox}.
 *
 * @param[in]	page		The destination page.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitBBox: (FSPDFPage*)page;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitBHorz}.
 *
 * @param[in]	page		The destination page.
 * @param[in]	top			Vertical coordinate of top edge
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitBHorz: (FSPDFPage*)page top: (float)top;
/**
 * @brief	Create a destination for zoom mode {@link FS_ZOOMMODE::e_zoomFitBVert}.
 *
 * @param[in]	page	The destination page.
 * @param[in]	left	Horizontal coordinate of left edge.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitBVert: (FSPDFPage*)page left: (float)left;
/**
 * @brief	Get the index of the destination page.
 *
 * @return	The page index, starting from 0.
 *			If there is any error, this function will return -1.
 */
-(int)getPageIndex;
/**
 * @brief	Get the zoom mode
 *
 * @return	Zoom mode value. Please refer to {@link FS_ZOOMMODE::e_zoomXYZ FS_ZOOMMODE::e_zoomXXX} values and it would be one of them.
 *			If there is any error, this function will return 0.
 */
-(enum FS_ZOOMMODE)getZoomMode;
/**
 * @brief	Get left position value.
 *
 * @details	This is only useful when zoom mode is {@link FS_ZOOMMODE::e_zoomXYZ}, {@link FS_ZOOMMODE::e_zoomFitVert}, {@link FS_ZOOMMODE::e_zoomFitRect} or {@link FS_ZOOMMODE::e_zoomFitBVert}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The left position value.
 */
-(float)getLeft;
/**
 * @brief	Get top position value.
 *
 * @details	This is only useful when zoom mode is {@link FS_ZOOMMODE::e_zoomXYZ}, {@link FS_ZOOMMODE::e_zoomFitHorz}, {@link FS_ZOOMMODE::e_zoomFitBHorz} or {@link FS_ZOOMMODE::e_zoomFitRect}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The top position value.
 */
-(float)getTop;
/**
 * @brief	Get right position value.
 *
 * @details	This is only useful when zoom mode is {@link FS_ZOOMMODE::e_zoomFitRect}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The right position value.
 */
-(float)getRight;
/**
 * @brief	Get bottom position value.
 *
 * @details	This is only useful when zoom mode is {@link FS_ZOOMMODE::e_zoomFitRect}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The bottom position value.
 */
-(float)getBottom;
/**
 * @brief	Get zoom factor.
 *
 * @details	This is only useful when zoom mode is {@link FS_ZOOMMODE::e_zoomXYZ}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The zoom factor.
 */
-(float)getZoomFactor;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to access a PDF action.
 *
 * @details	PDF supports following standard action types:<br>
 *			"Go-To Action", "Remote Go-To Action", "Embedded Go-To Action", "Launch Action", "Thread Action",
 *			"URI Action", "Sound Action", "Movie Action", "Hide Action", "Named Action", "Submit-Form Action",
 *			"Reset-Form Action", "Import-Data Action", "JavaScript Action", "Set-OCG-State Action", "Rendition Action",
 *			"Transition Action", "Go-To-3D-View Action".<br>
 *			A PDF action may have sub-actions. When this action is triggered, its sub-actions should also be triggered in turn.<br>
 *			Class ::FSAction is the base class for all kinds of PDF actions. For concrete action types, please refer to derived classes.
 *			Function {@link FSLink::getAction} can be used to get an action from a link annotation.
 *			Function {@link FSAction::create:actType:} can be used to create a new action -- currently only support {@link FS_ACTIONTYPE::e_actionTypeGoto}, and {@link FS_ACTIONTYPE::e_actionTypeURI}.
 *			This class also offers functions to access sub-actions.
 *
 * @see	FSLink
 */
@interface FSAction : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Create a new empty action, with specified action type.
 *
 * @details	The newly created action has no action data (except action type) yet.
 *			User needs to call the methods in concrete action classes to set action data.
 *
 * @param[in]	doc		The PDF document, which the new action belongs to. It should be valid.
 * @param[in]	actType		Action type, used to specify which action is to be created.
 *							Currently only support:<br>
 *							{@link FS_ACTIONTYPE::e_actionTypeGoto}, {@link FS_ACTIONTYPE::e_actionTypeURI}.
 *
 * @return	A new action object, with no action data.
 *			If there is any error, this function will return <b>nil</b>.
 */
+(FSAction*) create :(FSPDFDoc*)doc   actType:(enum FS_ACTIONTYPE) actType;
/**
 * @brief	Get action type.
 *
 * @return	Action type. Please refer to {@link FS_ACTIONTYPE::e_actionTypeGoto FS_ACTIONTYPE::e_actionTypeXXX} values and it would be one of them.
 */
-(enum FS_ACTIONTYPE)getType;
/**
 * @brief	Get the count of sub-actions.
 *
 * @return	The count of sub-actions.
 */
-(int)getSubActionCount;
/**
 * @brief	Get the sub-actions by index.
 *
 * @param[in]	index	 Index of sub-action to be retrieved. Valid range: from 0 to (<i>count</i>-1).
 *						<i>count</i> is returned by function {@link FSAction::getSubActionCount}.
 *
 * @return	A action instance for sub-action.
 *			If there is any error, this function will return <b>nil</b>.
 */
-(FSAction*)getSubAction: (int)index;
/**
 * @brief	Set the sub-action by index.
 *
 * @param[in]	index	 Index of sub-action to be retrieved. Valid range: from 0 to (<i>count</i>-1).<i>count</i> is returned by function {@link FSAction::getSubActionCount}.
 * @param[in]	subAction	New sub-action to be set.
 *							Currently only support following types as the new sub-action:<br>
 *							{@link FS_ACTIONTYPE::e_actionTypeGoto}, {@link FS_ACTIONTYPE::e_actionTypeURI}.
 */
-(void)setSubAction : (int)index  subAction:(FSAction*)subAction;
/**
 * @brief	Insert a new sub-action to the location specified by index.
 *
 * @param[in]	index	 Index of the location, where the new sub-action is inserted. <br>
 *							If this index value is below zero, the new sub-action will be inserted to be the first.<br>
 *							If this index value equals or larger than current sub-action count, the new sub-action will be inserted to be the last.
 * @param[in]	subAction	New sub-action to be inserted.
 *							Currently only support following types as the new sub-action:<br>
 *							{@link FS_ACTIONTYPE::e_actionTypeGoto}, {@link FS_ACTIONTYPE::e_actionTypeURI}.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)insertSubAction :(int)index  subAction:(FSAction*)subAction;

/**
 * @brief	Remove a sub-action, specified by index.
 *
 * @param[in]	index 	Index of sub-action to be retrieved. Valid range: from 0 to (<i>count</i>-1).
 *						<i>count</i> is returned by function {@link FSAction::getSubActionCount}.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)removeSubAction : (int)index;

/**
 * @brief	Remove all the sub-actions.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)removeAllSubActions;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to access a go-to action.
 *
 * @details	Go-to action is an action that changes the view to a specified destination (page, location, and magnification factor).<br>
 *			Class ::FSGotoAction is derived from ::FSAction and offers functions to access go-to action data.
 *
 * @see FSAction
 */
@interface FSGotoAction : FSAction
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Get the destination which the action will jump to.
 *
 * @return	A destination instance object.
 *			If there is any error, this function will return <b>nil</b>.
 */
-(FSDestination*)getDestination;
/**
 * @brief	Set the destination information.
 *
 * @param[in]	dest	New destination object to be set.
 */
-(void)setDestination : (FSDestination*)dest;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to access a uniform resource identifier (URI) action.
 *
 * @details	URI action is an action that causes a URI to be resolved.
 *			Class ::FSURIAction is derived from ::FSAction and offers functions to access URI action data.
 *
 * @see FSAction
 */
@interface FSURIAction : FSAction
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Get the URI string.
 *
 * @return	URI string.
 */
-(NSString *)getURI;
/**
 * @brief	Set the URI string.
 *
 * @param[in]	uri		New URI string to be set.
 */
-(void)setURI : (NSString*)uri;

/**
 * @brief	Set the value for tracking position flag.
 *
 * @param[in]	isTrackPosition		New boolean value to be set:<br>
 *									<b>YES</b> means to track position, while <b>NO</b> means not to track position.
 */
-(void)setTrackPositionFlag : (BOOL)isTrackPosition;
/**
 * @brief	Check whether to track the mouse position when the URI is resolved.
 *
 * @return	<b>YES</b> means application should track the mouse position,
 *			while <b>NO</b> means no need to track the mouse position.
 */
-(BOOL)isTrackPosition;

/** @brief Free the object. */
-(void)dealloc;

@end
